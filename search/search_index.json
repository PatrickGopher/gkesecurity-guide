{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Unofficial Google Kubernetes Engine (GKE) Security Guide Introduction Disclaimer This guide is not an official guide, is not endorsed by Google , and is comprised entirely from publicly available information. The information is provided \"as-is\", without warranty or fit for a particular purpose. You should fully understand the security implications of each recommendation before applying it in your environment. There are several books on the topic of getting Kubernetes Up and Running and even one specific to Kubernetes Security . If you are deploying in multiple platform environments like on-premise or across multiple cloud providers, those resources will be very useful. However, if you are deploying GKE clusters in GCP, you'll notice that there are a wide array of GCP and GKE-specific choices that need to be made. The goal of this guide is to help you prioritize and implement a security posture that meets your organization's needs while taking advantage of all the benefits of the GKE service. For each control and approach, the guide will attempt to help you understand the relative risks, relative likelihood, upfront cost and complexity, and ongoing cost and complexity of each security-related decision. Deep links to official GCP/GKE and Kubernetes documentation will be provided to guide further reading. Finally, links to hand-selected tools, books, and talk recordings will give additional support to the concepts for further exploration and understanding. Audience This guide is focused specifically on the following roles working with a GKE deployment: Operations - Those responsible for deploying and maintaining the GCP Project, Networking, and GKE Cluster lifecycle. Security - Those responsible for ensuring the operational environment adequately meets the organization's security standards and posture. Security-minded developers - Those deploying operational workloads into the GKE cluster looking to follow security best practices. Team Leads - Those managing teams implementing GKE clusters and responsible for prioritizing security with operational velocity. Structure of this Guide As each layer of a system builds upon the layer underneath, this guide begins with the foundation of all GCP services and explains how the structure of folders and projects in a GCP organization can help organize and guide security settings and permissions management. Next, it covers the types of network configurations that support GKE clusters for different isolation strategies. The core of the guide gets into cluster configuration, lifecycle and operations, observability, and the management of custom additions in the form of addons. With a solid base in place, the guide covers the deployment and configuration of workloads and container images in terms of security best practices. Finally, it covers certain security-related workflows such as auditing for conformance and handling security issues when an incident occurs. Each topic area will cover: A few sentences to paragraphs on what the topic or setting is and does. Why the topic or setting is important and the risks associated with it. The versions it applies to, where applicable. When you might want to prioritize adoption or implementation. The upfront cost and complexity of deploying the change or approach. The longer term cost and complexity of maintaining the system with this change or approach implemented. GKE vs Building Kubernetes Yourself For first time Kubernetes operators, it's a fantastic idea to follow Kubernetes the Hard Way by Kelsey Hightower and build a cluster from scratch. It will give you a deep understanding of the components, their configuration settings, and an appreciation for the complexity of the system. The very next thing you should do is leverage an approach to Kubernetes that ensures you and your team do as little of that work as possible. In many cases, this is best done by working with a managed Kubernetes service like GKE . Successful Kubernetes cluster deployments require solid execution in wide range of areas, and it's impossible to be execellent in all of them at once. From a business standpoint, you want your teams working on the problems that matter to your organization and to leave the boring operational work to the cloud service provider. Kubernetes version upgrades, security patches, operating system maintenance, logging and monitoring infrastructure, and more are all things you want to be building \"on top of\" and not having to \"build\" yourself first. Refer to the benefits of GKE for further reading. Contributing This guide is a living document, and contributions in the form of issues and PRs are welcomed. If you are considering writing new content, please open an issue outlining what you'd like to write about, where it might fit in, and other details. If you found this guide useful, please consider donating your time attending and supporting your local cloud-native and Kubernetes-related meetups. The success or failure of Kubernetes and the CNCF ecosystem is largely dependent on you and how you help elevate others with your compassion, assistance, and inclusivity. About the Author(s) @BradGeesaman is an Independent Security Consultant currently focused on helping teams secure their GKE clusters in harmony with their desired operational velocity.","title":"Introduction"},{"location":"#the-unofficial-google-kubernetes-engine-gke-security-guide","text":"","title":"The Unofficial Google Kubernetes Engine (GKE) Security Guide"},{"location":"#introduction","text":"Disclaimer This guide is not an official guide, is not endorsed by Google , and is comprised entirely from publicly available information. The information is provided \"as-is\", without warranty or fit for a particular purpose. You should fully understand the security implications of each recommendation before applying it in your environment. There are several books on the topic of getting Kubernetes Up and Running and even one specific to Kubernetes Security . If you are deploying in multiple platform environments like on-premise or across multiple cloud providers, those resources will be very useful. However, if you are deploying GKE clusters in GCP, you'll notice that there are a wide array of GCP and GKE-specific choices that need to be made. The goal of this guide is to help you prioritize and implement a security posture that meets your organization's needs while taking advantage of all the benefits of the GKE service. For each control and approach, the guide will attempt to help you understand the relative risks, relative likelihood, upfront cost and complexity, and ongoing cost and complexity of each security-related decision. Deep links to official GCP/GKE and Kubernetes documentation will be provided to guide further reading. Finally, links to hand-selected tools, books, and talk recordings will give additional support to the concepts for further exploration and understanding.","title":"Introduction"},{"location":"#audience","text":"This guide is focused specifically on the following roles working with a GKE deployment: Operations - Those responsible for deploying and maintaining the GCP Project, Networking, and GKE Cluster lifecycle. Security - Those responsible for ensuring the operational environment adequately meets the organization's security standards and posture. Security-minded developers - Those deploying operational workloads into the GKE cluster looking to follow security best practices. Team Leads - Those managing teams implementing GKE clusters and responsible for prioritizing security with operational velocity.","title":"Audience"},{"location":"#structure-of-this-guide","text":"As each layer of a system builds upon the layer underneath, this guide begins with the foundation of all GCP services and explains how the structure of folders and projects in a GCP organization can help organize and guide security settings and permissions management. Next, it covers the types of network configurations that support GKE clusters for different isolation strategies. The core of the guide gets into cluster configuration, lifecycle and operations, observability, and the management of custom additions in the form of addons. With a solid base in place, the guide covers the deployment and configuration of workloads and container images in terms of security best practices. Finally, it covers certain security-related workflows such as auditing for conformance and handling security issues when an incident occurs. Each topic area will cover: A few sentences to paragraphs on what the topic or setting is and does. Why the topic or setting is important and the risks associated with it. The versions it applies to, where applicable. When you might want to prioritize adoption or implementation. The upfront cost and complexity of deploying the change or approach. The longer term cost and complexity of maintaining the system with this change or approach implemented.","title":"Structure of this Guide"},{"location":"#gke-vs-building-kubernetes-yourself","text":"For first time Kubernetes operators, it's a fantastic idea to follow Kubernetes the Hard Way by Kelsey Hightower and build a cluster from scratch. It will give you a deep understanding of the components, their configuration settings, and an appreciation for the complexity of the system. The very next thing you should do is leverage an approach to Kubernetes that ensures you and your team do as little of that work as possible. In many cases, this is best done by working with a managed Kubernetes service like GKE . Successful Kubernetes cluster deployments require solid execution in wide range of areas, and it's impossible to be execellent in all of them at once. From a business standpoint, you want your teams working on the problems that matter to your organization and to leave the boring operational work to the cloud service provider. Kubernetes version upgrades, security patches, operating system maintenance, logging and monitoring infrastructure, and more are all things you want to be building \"on top of\" and not having to \"build\" yourself first. Refer to the benefits of GKE for further reading.","title":"GKE vs Building Kubernetes Yourself"},{"location":"#contributing","text":"This guide is a living document, and contributions in the form of issues and PRs are welcomed. If you are considering writing new content, please open an issue outlining what you'd like to write about, where it might fit in, and other details. If you found this guide useful, please consider donating your time attending and supporting your local cloud-native and Kubernetes-related meetups. The success or failure of Kubernetes and the CNCF ecosystem is largely dependent on you and how you help elevate others with your compassion, assistance, and inclusivity.","title":"Contributing"},{"location":"#about-the-authors","text":"@BradGeesaman is an Independent Security Consultant currently focused on helping teams secure their GKE clusters in harmony with their desired operational velocity.","title":"About the Author(s)"},{"location":"audit_and_compliance/","text":"Audit and Compliance CIS Benchmarking Inspec-GCP and Inspec-K8s Cloud Asset Inventory Forseti Security CSCC Common Misconfigurations","title":"Audit and Compliance"},{"location":"audit_and_compliance/#audit-and-compliance","text":"","title":"Audit and Compliance"},{"location":"audit_and_compliance/#cis-benchmarking","text":"","title":"CIS Benchmarking"},{"location":"audit_and_compliance/#inspec-gcp-and-inspec-k8s","text":"","title":"Inspec-GCP and Inspec-K8s"},{"location":"audit_and_compliance/#cloud-asset-inventory","text":"","title":"Cloud Asset Inventory"},{"location":"audit_and_compliance/#forseti-security","text":"","title":"Forseti Security"},{"location":"audit_and_compliance/#cscc","text":"","title":"CSCC"},{"location":"audit_and_compliance/#common-misconfigurations","text":"","title":"Common Misconfigurations"},{"location":"cloud_environment/","text":"Cloud Environment Identity and IAM Hierarchy At the foundation of your Google Cloud Platform (GCP) organization is a relationship with your trusted identity provider. Commonly, this is a Gsuite domain or a Cloud Identity installation. It's the basis of trust for how users and groups are managed throughout the GCP environments. It's where you audit logins/logouts, enforce MFA and session duration, and more. It's important to understand that in a GCP organization , where a user is granted permissions is just as important as what permissions are granted. For example, granting a user or service account a binding to an IAM role for Storage Admin at the project level allows that account to have all those permissions for all Google Cloud Storage (GCS) buckets in that project . Consider a somewhat realistic scenario: That project has GCS buckets for storing audit logs, VPC flow logs, and firewall logs. The security team is given Storage Admin permissions to manage these. Also in that same project , a development team wants to store some data used by their application. They too, get assigned Storage Admin permissions to that project . There are a few problems: Unless the security team is the one that made the IAM permissions assignment, they might not be aware of the exposure of their security log and event data. This jeopardizes the integrity of the information if needed for incident response and guaranteeing chain of custody. The development team now has access to this sensitive security information. Even though they may never access it or need to, this violates the principle of least privilege. Any time a new GCS bucket is added to this project , both teams will have access to it automatically. This can often be undesired behavior and tricky to untangle. Things get even more interesting when you consider a group of projects organized into a GCP Folder. Permissions granted to a Folder \"trickle down\" to the Folders and projects inside them. Because permissions are additive , a descendent project can't block or override those permissions. Therefore, careful consideration must be given to access granted at each level, and special attention is needed for IAM roles bound to users/groups/service accounts at the Folder or Organization levels. Some examples to consider: If a user is assigned the primitive role Owner at the Organization level, they will be Owner in every single project in the entire organization. The risk of compromise of those specific credentials (and by extension, that user's primary computing devices) is immediately increased to undesired levels. Granting Viewer at the Organization level allows reading all GCS buckets, all StackDriver logs, and viewing the configurations of most resources. In many cases, sensitive data is found in any or all of those places that can be used to escalate privileges. IAM \"Overcrowding\" The IAM page in the GCP Console tends to get \"crowded\" and harder to visually reason about when there are lots of individual bindings. Each IAM Role binding increases the cognitive load when reviewing permissions. Over time, this can get unwieldy and difficult to consolidate once systems and services are running in production. Best Practices Use a single Identity Provider - If all users and groups are originating from a single domain and are managed centrally, maintaining the proper IAM permissions throughout the GCP Organization is greatly simplified. Ensure all accounts use Multi-Factor Authentication (MFA) - Protecting the theft and misuse of GCP account credentials is the first and most important step to protecting your GCP infrastructure. If a set of credentials is stolen or a laptop lost, the window for those credentials to be valid is greatly reduced. Consolidate Users into Groups - Instead of granting individual users access, consider using a group, placing that user in that group, and granting access to the group. This way, if that person leaves the organization, it doesn't leave orphaned/unused accounts clogging up the IAM permissions listings that have to be manually removed using gcloud/UI. Also, when replacing that person who left, it's a simpler process of just adding the new person(s) to the same groups. No gcloud/UI changes are then necessary. Follow the Principle of Least Privilege - Take care when granting access Project-wide and even greater care when granting access at the Folder and Organization levels. There are often unintended consequences of over-granting permissions. Additionally, it's much harder to safely remove that binding as time goes on because inherited permissions might be required in a descendent project. Resources Creating and Managing GCP Organizations GCP Resource Hierarchy GSuite Security Cloud Identity Overview Cloud IAM Overview Organization, Folder, and Project Structure Resource hierarchy decisions made early on in your GCP journey tend to have a \"inertia\". Meaning, once they are configured a certain way, they become entrenched and harder to change as time goes on. If configured well, they can reduce administrative and security toil in managing resources and access to those resources in a clean, manageable way. If configured sub-optimally, you might feel like making administrative changes is overly complex and burdensome. Often, these decisions are often made in haste during design and implementation efforts \"just to get things working\". It might seem that there is pressure to get things perfect from the outset, but there is some level of built-in flexibility that you can take advantage of -- provided certain steps are taken. The two components of the GCP resource hierarchy that are trickiest to change are the organization and the non-empty project . The organization is the root of all resources, so it establishes the hierarchy. Projects cannot be renamed, and resources inside projects cannot be moved outside of projects . Folders can be made up to three levels deep, and projects can be moved around inside folders as needed. What this means: Permissions assigned at the organization level descend to everything below regardless of folder and project structure. Renaming projects or moving resources out of a project requires migration of resources, so careful thought to their name and what runs inside them is needed. Folders are a powerful tool in designing and adapting your IAM permissons hierarchy as needs change. Consider the following diagram of a GCP Organization: The organization is named example.com , and that is the root of the IAM hierarchy. Skipping over the folders tier for a second -- the projects are organized by operational environment which is very common and a best practice for keeping resources completely separated. Resources in the example-dev project have no access by default to example-test or example-prod . \"Fantastic!\" you might say, and copy this entire approach. However, depending on your organization's needs, this hierarchy might not be ideal! Let's break down the potential issues with the folders and the resources inside each project : In the example-dev project, instance_a and service_a may or may not be part of the same overall \"service\". If they both operate on data in bucket_a , for example, this makes sense. But if instance_a is managed by a separate team and shares nothing with service_a or bucket_a , you have a permissions scoping and \"attack blast radius\" problem. Permissions assigned on the example-dev project might be shared in undesirable ways between instance_a and service_a . In the event of a security compromise, attackers will be much more likely to obtain credentials with shared permissions and access nearby resources inside that same project. Finally, unless additional measures are taken with custom log sinks, the logs and metrics in Stackdriver will be going to the same project. Administrators and developers of the instance_a and service_a would be able to see each other's logs and metrics. In the example-test project, two compute instances and two GCS buckets are in place. If bucket_b and bucket_c are part of the same overall service, this makes sense. But if bucket_b serves data with PII in it and bucket_c is where VPC flow logs are stored, this increases the chance of accidental exposure if the Storage Viewer IAM Role is granted at the project level. The service accounts given the ability to read VPC flow logs may be able to read from the PII bucket and vice versa. A simple question to ask is, \"If the credentials for this user/group/service account were stolen without us knowing, what would they have access to?\" A service account with Storage Viewer granted at the example-test project means its credentials, if stolen or misused, would allow viewing the VPC flow logs and PII data in both GCS buckets. At the folder and project level, it may seem reasonable to name the folder after the team name. e.g. team-a-app1-dev . However, in practice, team names and organization charts in the real world tend to change more often than GCP resources. To remain flexible, it's much easier to use GCP groups to combine users into teams and then assign IAM permissions for that group at the desired level. Otherwise, you'll end up having team_a managing the team_b projects which will get very confusing. If your organization becomes large and has lots of geographic regions, a common practice is to have a top-level folder for regions like US , EU , etc. While this places no technical boundary on where the resources are deployed in descendent projects, it may make compliance auditing more straightforward where data must remain in certain regions or countries. Certain services, like GCS and Google Container Registry (GCR), don't have very granular IAM permissions available to them unless you want to maintain per-object ACLs. To avoid some of that additional overhead, a common practice is to make dedicated GCP projects just for certain types of common GCS buckets. Similarly, with GCR, container image push/pull permissions are coarse GCS \"storage\" permissions. Dedicated projects are therefore a near requirement for separate GCR registries. Highly privileged administrative components that have organization-wide permissions should always be in dedicated projects near the top of the organization . A common example is the project where Forseti Security components are installed. If this project was nested inside several levels of folders , an IAM Role granted higher in that structure would unintentially provide access to those systems. Best Practices Certain Decisions Have inertia - Some decisions like organization domain name and project names carry a lot of inertia and are hard to change without migrating resources, so it's important to decide on a naming convention for projects early and stick with it. Consider Central Control of Project Creation - If project creation is to be controlled centrally, you can use an Organization Access Policy to set which group has the Project Creator IAM Role. Avoid Embedding Team Names in GCP Resource Names - Map folder and project names more closely with service offerings and operational environments. Use groups to establish the concept of \"teams\" and assign groups the IAM permissions to the folders and projects they need. Use Folder Names at the Top Level Carefully - Consider using high level folders to group sub- folders and projects along boundaries that shouldn't change often but help guide organization and auditing. e.g. Geographic region. Use separate projects for each operational environment. It's common to append -dev , -test , and -prod to project names and then group them into a folder named for that service . e.g. The folder b2b-crm holds the projects named b2b-crm-dev , b2b-crm-test , and b2b-crm-prod . Resources Using Resource Hierarchy for Access Control Using IAM Securely Organization Access Policy Forseti Security Cluster Networking (TODO) VPC (shared vs peering based on administration model) Best Practices Do not overlap CIDRs Use VPC Aliasing Watch limits/quotas Resources Official GCP docs (shared vpc, vpc peering) VPC quotas/limits GKE VPC aliasing/subnetting","title":"Cloud Environment"},{"location":"cloud_environment/#cloud-environment","text":"","title":"Cloud Environment"},{"location":"cloud_environment/#identity-and-iam-hierarchy","text":"At the foundation of your Google Cloud Platform (GCP) organization is a relationship with your trusted identity provider. Commonly, this is a Gsuite domain or a Cloud Identity installation. It's the basis of trust for how users and groups are managed throughout the GCP environments. It's where you audit logins/logouts, enforce MFA and session duration, and more. It's important to understand that in a GCP organization , where a user is granted permissions is just as important as what permissions are granted. For example, granting a user or service account a binding to an IAM role for Storage Admin at the project level allows that account to have all those permissions for all Google Cloud Storage (GCS) buckets in that project . Consider a somewhat realistic scenario: That project has GCS buckets for storing audit logs, VPC flow logs, and firewall logs. The security team is given Storage Admin permissions to manage these. Also in that same project , a development team wants to store some data used by their application. They too, get assigned Storage Admin permissions to that project . There are a few problems: Unless the security team is the one that made the IAM permissions assignment, they might not be aware of the exposure of their security log and event data. This jeopardizes the integrity of the information if needed for incident response and guaranteeing chain of custody. The development team now has access to this sensitive security information. Even though they may never access it or need to, this violates the principle of least privilege. Any time a new GCS bucket is added to this project , both teams will have access to it automatically. This can often be undesired behavior and tricky to untangle. Things get even more interesting when you consider a group of projects organized into a GCP Folder. Permissions granted to a Folder \"trickle down\" to the Folders and projects inside them. Because permissions are additive , a descendent project can't block or override those permissions. Therefore, careful consideration must be given to access granted at each level, and special attention is needed for IAM roles bound to users/groups/service accounts at the Folder or Organization levels. Some examples to consider: If a user is assigned the primitive role Owner at the Organization level, they will be Owner in every single project in the entire organization. The risk of compromise of those specific credentials (and by extension, that user's primary computing devices) is immediately increased to undesired levels. Granting Viewer at the Organization level allows reading all GCS buckets, all StackDriver logs, and viewing the configurations of most resources. In many cases, sensitive data is found in any or all of those places that can be used to escalate privileges. IAM \"Overcrowding\" The IAM page in the GCP Console tends to get \"crowded\" and harder to visually reason about when there are lots of individual bindings. Each IAM Role binding increases the cognitive load when reviewing permissions. Over time, this can get unwieldy and difficult to consolidate once systems and services are running in production.","title":"Identity and IAM Hierarchy"},{"location":"cloud_environment/#best-practices","text":"Use a single Identity Provider - If all users and groups are originating from a single domain and are managed centrally, maintaining the proper IAM permissions throughout the GCP Organization is greatly simplified. Ensure all accounts use Multi-Factor Authentication (MFA) - Protecting the theft and misuse of GCP account credentials is the first and most important step to protecting your GCP infrastructure. If a set of credentials is stolen or a laptop lost, the window for those credentials to be valid is greatly reduced. Consolidate Users into Groups - Instead of granting individual users access, consider using a group, placing that user in that group, and granting access to the group. This way, if that person leaves the organization, it doesn't leave orphaned/unused accounts clogging up the IAM permissions listings that have to be manually removed using gcloud/UI. Also, when replacing that person who left, it's a simpler process of just adding the new person(s) to the same groups. No gcloud/UI changes are then necessary. Follow the Principle of Least Privilege - Take care when granting access Project-wide and even greater care when granting access at the Folder and Organization levels. There are often unintended consequences of over-granting permissions. Additionally, it's much harder to safely remove that binding as time goes on because inherited permissions might be required in a descendent project.","title":"Best Practices"},{"location":"cloud_environment/#resources","text":"Creating and Managing GCP Organizations GCP Resource Hierarchy GSuite Security Cloud Identity Overview Cloud IAM Overview","title":"Resources"},{"location":"cloud_environment/#organization-folder-and-project-structure","text":"Resource hierarchy decisions made early on in your GCP journey tend to have a \"inertia\". Meaning, once they are configured a certain way, they become entrenched and harder to change as time goes on. If configured well, they can reduce administrative and security toil in managing resources and access to those resources in a clean, manageable way. If configured sub-optimally, you might feel like making administrative changes is overly complex and burdensome. Often, these decisions are often made in haste during design and implementation efforts \"just to get things working\". It might seem that there is pressure to get things perfect from the outset, but there is some level of built-in flexibility that you can take advantage of -- provided certain steps are taken. The two components of the GCP resource hierarchy that are trickiest to change are the organization and the non-empty project . The organization is the root of all resources, so it establishes the hierarchy. Projects cannot be renamed, and resources inside projects cannot be moved outside of projects . Folders can be made up to three levels deep, and projects can be moved around inside folders as needed. What this means: Permissions assigned at the organization level descend to everything below regardless of folder and project structure. Renaming projects or moving resources out of a project requires migration of resources, so careful thought to their name and what runs inside them is needed. Folders are a powerful tool in designing and adapting your IAM permissons hierarchy as needs change. Consider the following diagram of a GCP Organization: The organization is named example.com , and that is the root of the IAM hierarchy. Skipping over the folders tier for a second -- the projects are organized by operational environment which is very common and a best practice for keeping resources completely separated. Resources in the example-dev project have no access by default to example-test or example-prod . \"Fantastic!\" you might say, and copy this entire approach. However, depending on your organization's needs, this hierarchy might not be ideal! Let's break down the potential issues with the folders and the resources inside each project : In the example-dev project, instance_a and service_a may or may not be part of the same overall \"service\". If they both operate on data in bucket_a , for example, this makes sense. But if instance_a is managed by a separate team and shares nothing with service_a or bucket_a , you have a permissions scoping and \"attack blast radius\" problem. Permissions assigned on the example-dev project might be shared in undesirable ways between instance_a and service_a . In the event of a security compromise, attackers will be much more likely to obtain credentials with shared permissions and access nearby resources inside that same project. Finally, unless additional measures are taken with custom log sinks, the logs and metrics in Stackdriver will be going to the same project. Administrators and developers of the instance_a and service_a would be able to see each other's logs and metrics. In the example-test project, two compute instances and two GCS buckets are in place. If bucket_b and bucket_c are part of the same overall service, this makes sense. But if bucket_b serves data with PII in it and bucket_c is where VPC flow logs are stored, this increases the chance of accidental exposure if the Storage Viewer IAM Role is granted at the project level. The service accounts given the ability to read VPC flow logs may be able to read from the PII bucket and vice versa. A simple question to ask is, \"If the credentials for this user/group/service account were stolen without us knowing, what would they have access to?\" A service account with Storage Viewer granted at the example-test project means its credentials, if stolen or misused, would allow viewing the VPC flow logs and PII data in both GCS buckets. At the folder and project level, it may seem reasonable to name the folder after the team name. e.g. team-a-app1-dev . However, in practice, team names and organization charts in the real world tend to change more often than GCP resources. To remain flexible, it's much easier to use GCP groups to combine users into teams and then assign IAM permissions for that group at the desired level. Otherwise, you'll end up having team_a managing the team_b projects which will get very confusing. If your organization becomes large and has lots of geographic regions, a common practice is to have a top-level folder for regions like US , EU , etc. While this places no technical boundary on where the resources are deployed in descendent projects, it may make compliance auditing more straightforward where data must remain in certain regions or countries. Certain services, like GCS and Google Container Registry (GCR), don't have very granular IAM permissions available to them unless you want to maintain per-object ACLs. To avoid some of that additional overhead, a common practice is to make dedicated GCP projects just for certain types of common GCS buckets. Similarly, with GCR, container image push/pull permissions are coarse GCS \"storage\" permissions. Dedicated projects are therefore a near requirement for separate GCR registries. Highly privileged administrative components that have organization-wide permissions should always be in dedicated projects near the top of the organization . A common example is the project where Forseti Security components are installed. If this project was nested inside several levels of folders , an IAM Role granted higher in that structure would unintentially provide access to those systems.","title":"Organization, Folder, and Project Structure"},{"location":"cloud_environment/#best-practices_1","text":"Certain Decisions Have inertia - Some decisions like organization domain name and project names carry a lot of inertia and are hard to change without migrating resources, so it's important to decide on a naming convention for projects early and stick with it. Consider Central Control of Project Creation - If project creation is to be controlled centrally, you can use an Organization Access Policy to set which group has the Project Creator IAM Role. Avoid Embedding Team Names in GCP Resource Names - Map folder and project names more closely with service offerings and operational environments. Use groups to establish the concept of \"teams\" and assign groups the IAM permissions to the folders and projects they need. Use Folder Names at the Top Level Carefully - Consider using high level folders to group sub- folders and projects along boundaries that shouldn't change often but help guide organization and auditing. e.g. Geographic region. Use separate projects for each operational environment. It's common to append -dev , -test , and -prod to project names and then group them into a folder named for that service . e.g. The folder b2b-crm holds the projects named b2b-crm-dev , b2b-crm-test , and b2b-crm-prod .","title":"Best Practices"},{"location":"cloud_environment/#resources_1","text":"Using Resource Hierarchy for Access Control Using IAM Securely Organization Access Policy Forseti Security","title":"Resources"},{"location":"cloud_environment/#cluster-networking-todo","text":"VPC (shared vs peering based on administration model)","title":"Cluster Networking (TODO)"},{"location":"cloud_environment/#best-practices_2","text":"Do not overlap CIDRs Use VPC Aliasing Watch limits/quotas","title":"Best Practices"},{"location":"cloud_environment/#resources_2","text":"Official GCP docs (shared vpc, vpc peering) VPC quotas/limits GKE VPC aliasing/subnetting","title":"Resources"},{"location":"cluster_addons/","text":"Cluster Add-ons Cloud Run on GKE Anthos Configuration Management Istio GPUs","title":"Cluster Add-ons"},{"location":"cluster_addons/#cluster-add-ons","text":"","title":"Cluster Add-ons"},{"location":"cluster_addons/#cloud-run-on-gke","text":"","title":"Cloud Run on GKE"},{"location":"cluster_addons/#anthos-configuration-management","text":"","title":"Anthos Configuration Management"},{"location":"cluster_addons/#istio","text":"","title":"Istio"},{"location":"cluster_addons/#gpus","text":"","title":"GPUs"},{"location":"cluster_configuration/","text":"Cluster Configuration Geographical Placement and Cluster Types (TODO) asdf Best Practices asdf asdf Resources Official GKE Docs asdf IAM and RBAC asdf Best Practices asdf asdf Resources Official GKE Docs asdf Cluster Access asdf Best Practices asdf asdf Resources Official GKE Docs asdf Cluster Settings asdf Best Practices asdf asdf Resources Official GKE Docs asdf Node Pool Settings asdf Best Practices asdf asdf Resources Official GKE Docs asdf","title":"Cluster Configuration"},{"location":"cluster_configuration/#cluster-configuration","text":"","title":"Cluster Configuration"},{"location":"cluster_configuration/#geographical-placement-and-cluster-types-todo","text":"asdf","title":"Geographical Placement and Cluster Types (TODO)"},{"location":"cluster_configuration/#best-practices","text":"asdf asdf","title":"Best Practices"},{"location":"cluster_configuration/#resources","text":"Official GKE Docs asdf","title":"Resources"},{"location":"cluster_configuration/#iam-and-rbac","text":"asdf","title":"IAM and RBAC"},{"location":"cluster_configuration/#best-practices_1","text":"asdf asdf","title":"Best Practices"},{"location":"cluster_configuration/#resources_1","text":"Official GKE Docs asdf","title":"Resources"},{"location":"cluster_configuration/#cluster-access","text":"asdf","title":"Cluster Access"},{"location":"cluster_configuration/#best-practices_2","text":"asdf asdf","title":"Best Practices"},{"location":"cluster_configuration/#resources_2","text":"Official GKE Docs asdf","title":"Resources"},{"location":"cluster_configuration/#cluster-settings","text":"asdf","title":"Cluster Settings"},{"location":"cluster_configuration/#best-practices_3","text":"asdf asdf","title":"Best Practices"},{"location":"cluster_configuration/#resources_3","text":"Official GKE Docs asdf","title":"Resources"},{"location":"cluster_configuration/#node-pool-settings","text":"asdf","title":"Node Pool Settings"},{"location":"cluster_configuration/#best-practices_4","text":"asdf asdf","title":"Best Practices"},{"location":"cluster_configuration/#resources_4","text":"Official GKE Docs asdf","title":"Resources"},{"location":"cluster_lifecycle/","text":"Cluster Lifecycle Infrastructure as Code Upgrades Scaling Security Bulletins and Patching Maintenance Windows","title":"Cluster Lifecycle"},{"location":"cluster_lifecycle/#cluster-lifecycle","text":"","title":"Cluster Lifecycle"},{"location":"cluster_lifecycle/#infrastructure-as-code","text":"","title":"Infrastructure as Code"},{"location":"cluster_lifecycle/#upgrades","text":"","title":"Upgrades"},{"location":"cluster_lifecycle/#scaling","text":"","title":"Scaling"},{"location":"cluster_lifecycle/#security-bulletins-and-patching","text":"","title":"Security Bulletins and Patching"},{"location":"cluster_lifecycle/#maintenance-windows","text":"","title":"Maintenance Windows"},{"location":"cluster_observability/","text":"Cluster Observability Audit Logs Control Plane Logs Worker Node Logs Pod Logs Node Metrics Kubernetes State Metrics Workload Metrics","title":"Cluster Observability"},{"location":"cluster_observability/#cluster-observability","text":"","title":"Cluster Observability"},{"location":"cluster_observability/#audit-logs","text":"","title":"Audit Logs"},{"location":"cluster_observability/#control-plane-logs","text":"","title":"Control Plane Logs"},{"location":"cluster_observability/#worker-node-logs","text":"","title":"Worker Node Logs"},{"location":"cluster_observability/#pod-logs","text":"","title":"Pod Logs"},{"location":"cluster_observability/#node-metrics","text":"","title":"Node Metrics"},{"location":"cluster_observability/#kubernetes-state-metrics","text":"","title":"Kubernetes State Metrics"},{"location":"cluster_observability/#workload-metrics","text":"","title":"Workload Metrics"},{"location":"container_images/","text":"Container Images Dockerfile Best Practices Base Images Package Vulnerabilities Application Vulnerabilities","title":"Container Images"},{"location":"container_images/#container-images","text":"","title":"Container Images"},{"location":"container_images/#dockerfile-best-practices","text":"","title":"Dockerfile Best Practices"},{"location":"container_images/#base-images","text":"","title":"Base Images"},{"location":"container_images/#package-vulnerabilities","text":"","title":"Package Vulnerabilities"},{"location":"container_images/#application-vulnerabilities","text":"","title":"Application Vulnerabilities"},{"location":"detection_and_response/","text":"Detection and Response Runtime Detection Incident Response Forensics Credential Revocation and Rotation","title":"Detection and Response"},{"location":"detection_and_response/#detection-and-response","text":"","title":"Detection and Response"},{"location":"detection_and_response/#runtime-detection","text":"","title":"Runtime Detection"},{"location":"detection_and_response/#incident-response","text":"","title":"Incident Response"},{"location":"detection_and_response/#forensics","text":"","title":"Forensics"},{"location":"detection_and_response/#credential-revocation-and-rotation","text":"","title":"Credential Revocation and Rotation"},{"location":"project_organization/","text":"Project Organization Project Quotas (TODO) CPU/RAM/GPU/Disk, Subnets, Instances per mig Best Practices 110% (more than double) current usage Subnets/VPC Resources Official GCP Docs - Quotas and limits Project and Environment Separation Three types of deployment models, pros and cons, easy of switching between them, clusters per project Best Practices 1 cluster per project 1 cluster per colocated set of services with similar data gravity and redundancy needs Resources Official GKE Docs? asdf Separating Tenants Define hard and soft tenancy. Per cluster or per namespace Best Practices Hard tenancy - separate projects/clusters Soft tenancy - shared projects/clusters Resources ?","title":"Project Organization"},{"location":"project_organization/#project-organization","text":"","title":"Project Organization"},{"location":"project_organization/#project-quotas-todo","text":"CPU/RAM/GPU/Disk, Subnets, Instances per mig","title":"Project Quotas (TODO)"},{"location":"project_organization/#best-practices","text":"110% (more than double) current usage Subnets/VPC","title":"Best Practices"},{"location":"project_organization/#resources","text":"Official GCP Docs - Quotas and limits","title":"Resources"},{"location":"project_organization/#project-and-environment-separation","text":"Three types of deployment models, pros and cons, easy of switching between them, clusters per project","title":"Project and Environment Separation"},{"location":"project_organization/#best-practices_1","text":"1 cluster per project 1 cluster per colocated set of services with similar data gravity and redundancy needs","title":"Best Practices"},{"location":"project_organization/#resources_1","text":"Official GKE Docs? asdf","title":"Resources"},{"location":"project_organization/#separating-tenants","text":"Define hard and soft tenancy. Per cluster or per namespace","title":"Separating Tenants"},{"location":"project_organization/#best-practices_2","text":"Hard tenancy - separate projects/clusters Soft tenancy - shared projects/clusters","title":"Best Practices"},{"location":"project_organization/#resources_2","text":"?","title":"Resources"},{"location":"workload_configuration/","text":"Workload Configuration Trusted Image Repos Deployment Settings and Best Practices Pod Security Policy Network Policy RBAC Dynamic Admission Control Secrets Management Pod Disruption Budgets LimitRanges Resource Control","title":"Workload Configuration"},{"location":"workload_configuration/#workload-configuration","text":"","title":"Workload Configuration"},{"location":"workload_configuration/#trusted-image-repos","text":"","title":"Trusted Image Repos"},{"location":"workload_configuration/#deployment-settings-and-best-practices","text":"","title":"Deployment Settings and Best Practices"},{"location":"workload_configuration/#pod-security-policy","text":"","title":"Pod Security Policy"},{"location":"workload_configuration/#network-policy","text":"","title":"Network Policy"},{"location":"workload_configuration/#rbac","text":"","title":"RBAC"},{"location":"workload_configuration/#dynamic-admission-control","text":"","title":"Dynamic Admission Control"},{"location":"workload_configuration/#secrets-management","text":"","title":"Secrets Management"},{"location":"workload_configuration/#pod-disruption-budgets","text":"","title":"Pod Disruption Budgets"},{"location":"workload_configuration/#limitranges","text":"","title":"LimitRanges"},{"location":"workload_configuration/#resource-control","text":"","title":"Resource Control"}]}